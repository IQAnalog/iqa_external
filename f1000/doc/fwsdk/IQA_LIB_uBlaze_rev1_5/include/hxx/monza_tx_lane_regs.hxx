//*******************************************************************************
//      __  __                                                                  *
//     /  \/  \                                                                 *
//         \   \                                                                *
//    I Q - A N A L O G                                                         *
//           \   \            IQ-Analog Corp                                    *
//            \__/\__/       www.iqanalog.com                                   *
//                                                                              *
//------------------------------------------------------------------------------*
//                                                                              *
// Copyright (C) 2018-2019 IQ-Analog Corp. All rights reserved.                 *
//                                                                              *
//------------------------------------------------------------------------------*
// IQ-Analog CONFIDENTIAL                                                       *
//------------------------------------------------------------------------------*
//                                                                              *
// This file is released with "Government Purpose Rights" as defined            *
// in DFARS SUBPART 227.71, clause 252.227-7013.                                *
//                                                                              *
//*******************************************************************************

// Generated by RMM v3.1.4
// IQ-Analog Corp. 2013-2018.

#ifndef __MONZA_TX_LANE_REGS__
#define __MONZA_TX_LANE_REGS__

#ifndef __TX_LANE_CGS_ILAS_STATUS__
#define __TX_LANE_CGS_ILAS_STATUS__
#define TX_LANE_CGS_ILAS_STATUS(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.tx_lane_cgs_ilas_status
#define monza_tx_lane_regs_CGS_ILAS_FSM_STATE(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.cgs_ilas_fsm_state
#define monza_tx_lane_regs_CGS_LOCKED_ACK(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.cgs_locked_ack
#define monza_tx_lane_regs_CGS_DONE_ACK(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.cgs_done_ack
#define monza_tx_lane_regs_ILAS_DONE_ACK(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.ilas_done_ack
#define monza_tx_lane_regs_ILAS_START_ACK(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.ilas_start_ack
#define monza_tx_lane_regs_TX_DATA_STATE(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.tx_data_state
#define monza_tx_lane_regs_RCHD_EARLY_DATA_RELEASE(x) (x)->tx_lane_cgs_ilas_status_register.tx_lane_cgs_ilas_status_u.bits.rchd_early_data_release
typedef volatile struct tx_lane_cgs_ilas_status_s {
	union {
		struct {
			unsigned int cgs_ilas_fsm_state : 3;
			unsigned int cgs_locked_ack : 1;
			unsigned int cgs_done_ack : 1;
			unsigned int ilas_done_ack : 1;
			unsigned int ilas_start_ack : 1;
			unsigned int tx_data_state : 1;
			unsigned int rchd_early_data_release : 1;
		} bits;
		uint32_t tx_lane_cgs_ilas_status;
	} tx_lane_cgs_ilas_status_u;
} tx_lane_cgs_ilas_status_t;
#endif /* __TX_LANE_CGS_ILAS_STATUS__ */

#ifndef __TX_LANE_CONFIG__
#define __TX_LANE_CONFIG__
#define TX_LANE_CONFIG(x) (x)->tx_lane_config_register.tx_lane_config_u.tx_lane_config
#define monza_tx_lane_regs_LANE_LINK(x) (x)->tx_lane_config_register.tx_lane_config_u.bits.lane_link
#define monza_tx_lane_regs_LANE_ID(x) (x)->tx_lane_config_register.tx_lane_config_u.bits.lane_id
typedef volatile struct tx_lane_config_s {
	union {
		struct {
			unsigned int lane_link : 1;
			unsigned int lane_id : 4;
		} bits;
		uint32_t tx_lane_config;
	} tx_lane_config_u;
} tx_lane_config_t;
#endif /* __TX_LANE_CONFIG__ */

#ifndef __TX_MANUAL__
#define __TX_MANUAL__
#define TX_MANUAL(x) (x)->tx_manual_register.tx_manual_u.tx_manual
#define monza_tx_lane_regs_LANE_FORCE_RESYNC(x) (x)->tx_manual_register.tx_manual_u.bits.lane_force_resync
#define monza_tx_lane_regs_MANUAL_TX_CGS_LOCKED(x) (x)->tx_manual_register.tx_manual_u.bits.manual_tx_cgs_locked
#define monza_tx_lane_regs_MANUAL_TX_CGS_DONE(x) (x)->tx_manual_register.tx_manual_u.bits.manual_tx_cgs_done
#define monza_tx_lane_regs_MANUAL_TX_FIFO_RESET(x) (x)->tx_manual_register.tx_manual_u.bits.manual_tx_fifo_reset
#define monza_tx_lane_regs_BIT_REVERSE(x) (x)->tx_manual_register.tx_manual_u.bits.bit_reverse
#define monza_tx_lane_regs_MANUAL_CGS_ILAS_FSM_ENABLED(x) (x)->tx_manual_register.tx_manual_u.bits.manual_cgs_ilas_fsm_enabled
typedef volatile struct tx_manual_s {
	union {
		struct {
			unsigned int lane_force_resync : 1;
			unsigned int manual_tx_cgs_locked : 1;
			unsigned int manual_tx_cgs_done : 1;
			unsigned int manual_tx_fifo_reset : 1;
			unsigned int bit_reverse : 1;
			unsigned int manual_cgs_ilas_fsm_enabled : 1;
		} bits;
		uint32_t tx_manual;
	} tx_manual_u;
} tx_manual_t;
#endif /* __TX_MANUAL__ */

#ifndef __TX_TEST_MODES__
#define __TX_TEST_MODES__
#define TX_TEST_MODES(x) (x)->tx_test_modes_register.tx_test_modes_u.tx_test_modes
#define monza_tx_lane_regs_TEST_REPEAT_K_EN(x) (x)->tx_test_modes_register.tx_test_modes_u.bits.test_repeat_k_en
#define monza_tx_lane_regs_TEST_REPEAT_D21_5_EN(x) (x)->tx_test_modes_register.tx_test_modes_u.bits.test_repeat_d21_5_en
#define monza_tx_lane_regs_TEST_REPEAT_ILAS(x) (x)->tx_test_modes_register.tx_test_modes_u.bits.test_repeat_ilas
#define monza_tx_lane_regs_SEL_RAND_NUM(x) (x)->tx_test_modes_register.tx_test_modes_u.bits.sel_rand_num
#define monza_tx_lane_regs_SEL_TEST4ENC(x) (x)->tx_test_modes_register.tx_test_modes_u.bits.sel_test4enc
#define monza_tx_lane_regs_ILAS_DUMMY_DATA_FIXED_BYTE(x) (x)->tx_test_modes_register.tx_test_modes_u.bits.ilas_dummy_data_fixed_byte
typedef volatile struct tx_test_modes_s {
	union {
		struct {
			unsigned int test_repeat_k_en : 1;
			unsigned int test_repeat_d21_5_en : 1;
			unsigned int test_repeat_ilas : 1;
			unsigned int sel_rand_num : 1;
			unsigned int sel_test4enc : 1;
			unsigned int ilas_dummy_data_fixed_byte : 8;
		} bits;
		uint32_t tx_test_modes;
	} tx_test_modes_u;
} tx_test_modes_t;
#endif /* __TX_TEST_MODES__ */

#ifndef __TX_CONFIG_DATA_WORD_6__
#define __TX_CONFIG_DATA_WORD_6__
#define TX_CONFIG_DATA_WORD_6(x) (x)->tx_config_data_word_6_register.tx_config_data_word_6_u.tx_config_data_word_6
#define monza_tx_lane_regs_CONFIG_DATA_WORD_6(x) (x)->tx_config_data_word_6_register.tx_config_data_word_6_u.bits.config_data_word_6
typedef volatile struct tx_config_data_word_6_s {
	union {
		struct {
			unsigned int config_data_word_6 : 16;
		} bits;
		uint32_t tx_config_data_word_6;
	} tx_config_data_word_6_u;
} tx_config_data_word_6_t;
#endif /* __TX_CONFIG_DATA_WORD_6__ */

#ifndef __TX_CONFIG_DATA_WORD_5__
#define __TX_CONFIG_DATA_WORD_5__
#define TX_CONFIG_DATA_WORD_5(x) (x)->tx_config_data_word_5_register.tx_config_data_word_5_u.tx_config_data_word_5
#define monza_tx_lane_regs_CONFIG_DATA_WORD_5(x) (x)->tx_config_data_word_5_register.tx_config_data_word_5_u.bits.config_data_word_5
typedef volatile struct tx_config_data_word_5_s {
	union {
		struct {
			unsigned int config_data_word_5 : 16;
		} bits;
		uint32_t tx_config_data_word_5;
	} tx_config_data_word_5_u;
} tx_config_data_word_5_t;
#endif /* __TX_CONFIG_DATA_WORD_5__ */

#ifndef __TX_CONFIG_DATA_WORD_4__
#define __TX_CONFIG_DATA_WORD_4__
#define TX_CONFIG_DATA_WORD_4(x) (x)->tx_config_data_word_4_register.tx_config_data_word_4_u.tx_config_data_word_4
#define monza_tx_lane_regs_CONFIG_DATA_WORD_4(x) (x)->tx_config_data_word_4_register.tx_config_data_word_4_u.bits.config_data_word_4
typedef volatile struct tx_config_data_word_4_s {
	union {
		struct {
			unsigned int config_data_word_4 : 16;
		} bits;
		uint32_t tx_config_data_word_4;
	} tx_config_data_word_4_u;
} tx_config_data_word_4_t;
#endif /* __TX_CONFIG_DATA_WORD_4__ */

#ifndef __TX_CONFIG_DATA_WORD_3__
#define __TX_CONFIG_DATA_WORD_3__
#define TX_CONFIG_DATA_WORD_3(x) (x)->tx_config_data_word_3_register.tx_config_data_word_3_u.tx_config_data_word_3
#define monza_tx_lane_regs_CONFIG_DATA_WORD_3(x) (x)->tx_config_data_word_3_register.tx_config_data_word_3_u.bits.config_data_word_3
typedef volatile struct tx_config_data_word_3_s {
	union {
		struct {
			unsigned int config_data_word_3 : 16;
		} bits;
		uint32_t tx_config_data_word_3;
	} tx_config_data_word_3_u;
} tx_config_data_word_3_t;
#endif /* __TX_CONFIG_DATA_WORD_3__ */

#ifndef __TX_CONFIG_DATA_WORD_2__
#define __TX_CONFIG_DATA_WORD_2__
#define TX_CONFIG_DATA_WORD_2(x) (x)->tx_config_data_word_2_register.tx_config_data_word_2_u.tx_config_data_word_2
#define monza_tx_lane_regs_CONFIG_DATA_WORD_2(x) (x)->tx_config_data_word_2_register.tx_config_data_word_2_u.bits.config_data_word_2
typedef volatile struct tx_config_data_word_2_s {
	union {
		struct {
			unsigned int config_data_word_2 : 16;
		} bits;
		uint32_t tx_config_data_word_2;
	} tx_config_data_word_2_u;
} tx_config_data_word_2_t;
#endif /* __TX_CONFIG_DATA_WORD_2__ */

#ifndef __TX_CONFIG_DATA_WORD_1__
#define __TX_CONFIG_DATA_WORD_1__
#define TX_CONFIG_DATA_WORD_1(x) (x)->tx_config_data_word_1_register.tx_config_data_word_1_u.tx_config_data_word_1
#define monza_tx_lane_regs_CONFIG_DATA_WORD_1(x) (x)->tx_config_data_word_1_register.tx_config_data_word_1_u.bits.config_data_word_1
typedef volatile struct tx_config_data_word_1_s {
	union {
		struct {
			unsigned int config_data_word_1 : 16;
		} bits;
		uint32_t tx_config_data_word_1;
	} tx_config_data_word_1_u;
} tx_config_data_word_1_t;
#endif /* __TX_CONFIG_DATA_WORD_1__ */

#ifndef __TX_CONFIG_DATA_WORD_0__
#define __TX_CONFIG_DATA_WORD_0__
#define TX_CONFIG_DATA_WORD_0(x) (x)->tx_config_data_word_0_register.tx_config_data_word_0_u.tx_config_data_word_0
#define monza_tx_lane_regs_CONFIG_DATA_WORD_0(x) (x)->tx_config_data_word_0_register.tx_config_data_word_0_u.bits.config_data_word_0
typedef volatile struct tx_config_data_word_0_s {
	union {
		struct {
			unsigned int config_data_word_0 : 16;
		} bits;
		uint32_t tx_config_data_word_0;
	} tx_config_data_word_0_u;
} tx_config_data_word_0_t;
#endif /* __TX_CONFIG_DATA_WORD_0__ */

#ifndef __ENCODER_TEST_INPUTS__
#define __ENCODER_TEST_INPUTS__
#define ENCODER_TEST_INPUTS(x) (x)->encoder_test_inputs_register.encoder_test_inputs_u.encoder_test_inputs
#define monza_tx_lane_regs_DISPARITY_REG_IN(x) (x)->encoder_test_inputs_register.encoder_test_inputs_u.bits.disparity_reg_in
#define monza_tx_lane_regs_EN_DISPARITY_FB(x) (x)->encoder_test_inputs_register.encoder_test_inputs_u.bits.en_disparity_fb
#define monza_tx_lane_regs_LD_DISPARITY_REG(x) (x)->encoder_test_inputs_register.encoder_test_inputs_u.bits.ld_disparity_reg
typedef volatile struct encoder_test_inputs_s {
	union {
		struct {
			unsigned int disparity_reg_in : 1;
			unsigned int en_disparity_fb : 1;
			unsigned int ld_disparity_reg : 1;
		} bits;
		uint32_t encoder_test_inputs;
	} encoder_test_inputs_u;
} encoder_test_inputs_t;
#endif /* __ENCODER_TEST_INPUTS__ */

#ifndef __ENCODER_TEST_OUTPUTS__
#define __ENCODER_TEST_OUTPUTS__
#define ENCODER_TEST_OUTPUTS(x) (x)->encoder_test_outputs_register.encoder_test_outputs_u.encoder_test_outputs
#define monza_tx_lane_regs_ENCODER_9B_DATA_IN(x) (x)->encoder_test_outputs_register.encoder_test_outputs_u.bits.encoder_9b_data_in
#define monza_tx_lane_regs_DISPARITY_COMB(x) (x)->encoder_test_outputs_register.encoder_test_outputs_u.bits.disparity_comb
#define monza_tx_lane_regs_TOGGLE_DISPARITY(x) (x)->encoder_test_outputs_register.encoder_test_outputs_u.bits.toggle_disparity
#define monza_tx_lane_regs_DISPARITY_REG(x) (x)->encoder_test_outputs_register.encoder_test_outputs_u.bits.disparity_reg
typedef volatile struct encoder_test_outputs_s {
	union {
		struct {
			unsigned int encoder_9b_data_in : 9;
			unsigned int disparity_comb : 1;
			unsigned int toggle_disparity : 1;
			unsigned int disparity_reg : 1;
		} bits;
		uint32_t encoder_test_outputs;
	} encoder_test_outputs_u;
} encoder_test_outputs_t;
#endif /* __ENCODER_TEST_OUTPUTS__ */

#ifndef __ENCODER_DATA_OUTPUTS__
#define __ENCODER_DATA_OUTPUTS__
#define ENCODER_DATA_OUTPUTS(x) (x)->encoder_data_outputs_register.encoder_data_outputs_u.encoder_data_outputs
#define monza_tx_lane_regs_ENCODED_10B_DATA_COMB(x) (x)->encoder_data_outputs_register.encoder_data_outputs_u.bits.encoded_10b_data_comb
typedef volatile struct encoder_data_outputs_s {
	union {
		struct {
			unsigned int encoded_10b_data_comb : 10;
		} bits;
		uint32_t encoder_data_outputs;
	} encoder_data_outputs_u;
} encoder_data_outputs_t;
#endif /* __ENCODER_DATA_OUTPUTS__ */

typedef struct monza_tx_lane_regs_s
{
	tx_lane_cgs_ilas_status_t tx_lane_cgs_ilas_status_register;	// Address: 0x0
	tx_lane_config_t tx_lane_config_register;	// Address: 0x1
	tx_manual_t tx_manual_register;	// Address: 0x2
	tx_test_modes_t tx_test_modes_register;	// Address: 0x3
	tx_config_data_word_6_t tx_config_data_word_6_register;	// Address: 0x4
	tx_config_data_word_5_t tx_config_data_word_5_register;	// Address: 0x5
	tx_config_data_word_4_t tx_config_data_word_4_register;	// Address: 0x6
	tx_config_data_word_3_t tx_config_data_word_3_register;	// Address: 0x7
	tx_config_data_word_2_t tx_config_data_word_2_register;	// Address: 0x8
	tx_config_data_word_1_t tx_config_data_word_1_register;	// Address: 0x9
	tx_config_data_word_0_t tx_config_data_word_0_register;	// Address: 0xa
	encoder_test_inputs_t encoder_test_inputs_register;	// Address: 0xb
	encoder_test_outputs_t encoder_test_outputs_register;	// Address: 0xc
	encoder_data_outputs_t encoder_data_outputs_register;	// Address: 0xd
} monza_tx_lane_regs_t;

#endif /* __MONZA_TX_LANE_REGS__ */
