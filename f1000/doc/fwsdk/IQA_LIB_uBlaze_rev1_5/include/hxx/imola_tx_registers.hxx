//*******************************************************************************
//      __  __                                                                  *
//     /  \/  \                                                                 *
//         \   \                                                                *
//    I Q - A N A L O G                                                         *
//           \   \            IQ-Analog Corp                                    *
//            \__/\__/       www.iqanalog.com                                   *
//                                                                              *
//------------------------------------------------------------------------------*
//                                                                              *
// Copyright (C) 2018-2019 IQ-Analog Corp. All rights reserved.                 *
//                                                                              *
//------------------------------------------------------------------------------*
// IQ-Analog CONFIDENTIAL                                                       *
//------------------------------------------------------------------------------*
//                                                                              *
// This file is released with "Government Purpose Rights" as defined            *
// in DFARS SUBPART 227.71, clause 252.227-7013.                                *
//                                                                              *
//*******************************************************************************

// Generated by RMM v3.1.4
// IQ-Analog Corp. 2013-2018.

#ifndef __IMOLA_TX_REGISTERS__
#define __IMOLA_TX_REGISTERS__

#ifndef __TX_LINK_CONFIG__
#define __TX_LINK_CONFIG__
#define TX_LINK_CONFIG(x) (x)->tx_link_config_register.tx_link_config_u.tx_link_config
#define imola_tx_registers_SW_RST_N(x) (x)->tx_link_config_register.tx_link_config_u.bits.sw_rst_n
#define imola_tx_registers_FRAME_SIZE(x) (x)->tx_link_config_register.tx_link_config_u.bits.frame_size
#define imola_tx_registers_MULTIFRAME_SIZE(x) (x)->tx_link_config_register.tx_link_config_u.bits.multiframe_size
#define imola_tx_registers_SUBCLASS(x) (x)->tx_link_config_register.tx_link_config_u.bits.subclass
#define imola_tx_registers_DISABLE_SYSREF_MONITOR(x) (x)->tx_link_config_register.tx_link_config_u.bits.disable_sysref_monitor
#define imola_tx_registers_DISABLE_SYSREF_REALIGN(x) (x)->tx_link_config_register.tx_link_config_u.bits.disable_sysref_realign
#define imola_tx_registers_FORCE_RESYNC(x) (x)->tx_link_config_register.tx_link_config_u.bits.force_resync
#define imola_tx_registers_EXTRA_MFRAMES_AFTER_SYNC(x) (x)->tx_link_config_register.tx_link_config_u.bits.extra_mframes_after_sync
#define imola_tx_registers_HW_ENABLE_FRAMER_CONTROLLER(x) (x)->tx_link_config_register.tx_link_config_u.bits.hw_enable_framer_controller
#define imola_tx_registers_SHIFT_PING_PONG(x) (x)->tx_link_config_register.tx_link_config_u.bits.shift_ping_pong
#define imola_tx_registers_RD_TL2LL_FIFO_THRESHOLD(x) (x)->tx_link_config_register.tx_link_config_u.bits.rd_tl2ll_fifo_threshold
//F1000 REV B Specific - START
#define imola_tx_registers_EN_RX2TX_LPBK(x) (x)->tx_link_config_register.tx_link_config_u.bits.en_rx2tx_lpbk
#define imola_tx_registers_SW_RST_N_RX2TX_LPBK_FIFO(x) (x)->tx_link_config_register.tx_link_config_u.bits.sw_rst_n_rx2tx_lpbk_fifo
#define imola_tx_registers_EN_TX2RX_LPBK(x) (x)->tx_link_config_register.tx_link_config_u.bits.en_tx2rx_lpbk
#define imola_tx_registers_SW_RST_N_TX2RX_LPBK_FIFO(x) (x)->tx_link_config_register.tx_link_config_u.bits.sw_rst_n_tx2rx_lpbk_fifo
#define imola_tx_registers_TX_POL(x) (x)->tx_link_config_register.tx_link_config_u.bits.tx_pol
#define imola_tx_registers_BYTE_SWAP(x) (x)->tx_link_config_register.tx_link_config_u.bits.byte_swap
//F1000 REV B Specific - END
typedef volatile struct tx_link_config_s {
	union {
		struct {
			unsigned int sw_rst_n : 1;
			unsigned int frame_size : 5;
			unsigned int multiframe_size : 4;
			unsigned int subclass : 1;
			unsigned int disable_sysref_monitor : 1;
			unsigned int disable_sysref_realign : 1;
			unsigned int force_resync : 1;
			unsigned int extra_mframes_after_sync : 2;
			unsigned int hw_enable_framer_controller : 1;
			unsigned int shift_ping_pong : 1;
			unsigned int rd_tl2ll_fifo_threshold : 4;
//F1000 REV B Specific - START
			unsigned int en_rx2tx_lpbk : 1;
			unsigned int sw_rst_n_rx2tx_lpbk_fifo : 1;
			unsigned int en_tx2rx_lpbk : 1;
			unsigned int sw_rst_n_tx2rx_lpbk_fifo : 1;
			unsigned int tx_pol : 1;
			unsigned int byte_swap : 1;
//F1000 REV B Specific - END
		} bits;
		uint32_t tx_link_config;
	} tx_link_config_u;
} tx_link_config_t;
#endif /* __TX_LINK_CONFIG__ */

#ifndef __TX_LINK_ENABLE__
#define __TX_LINK_ENABLE__
#define TX_LINK_ENABLE(x) (x)->tx_link_enable_register.tx_link_enable_u.tx_link_enable
#define imola_tx_registers_LINK0_ENABLE(x) (x)->tx_link_enable_register.tx_link_enable_u.bits.link0_enable
#define imola_tx_registers_TX_ENABLE(x) (x)->tx_link_enable_register.tx_link_enable_u.bits.tx_enable
typedef volatile struct tx_link_enable_s {
	union {
		struct {
			unsigned int link0_enable : 1;
			unsigned int tx_enable : 1;
		} bits;
		uint32_t tx_link_enable;
	} tx_link_enable_u;
} tx_link_enable_t;
#endif /* __TX_LINK_ENABLE__ */

#ifndef __TX_SYSREF_MISALIGN_COUNT__
#define __TX_SYSREF_MISALIGN_COUNT__
#define TX_SYSREF_MISALIGN_COUNT(x) (x)->tx_sysref_misalign_count_register.tx_sysref_misalign_count_u.tx_sysref_misalign_count
#define imola_tx_registers_SYSREF_MISALIGN_CNT(x) (x)->tx_sysref_misalign_count_register.tx_sysref_misalign_count_u.bits.sysref_misalign_cnt
typedef volatile struct tx_sysref_misalign_count_s {
	union {
		struct {
			unsigned int sysref_misalign_cnt : 16;
		} bits;
		uint32_t tx_sysref_misalign_count;
	} tx_sysref_misalign_count_u;
} tx_sysref_misalign_count_t;
#endif /* __TX_SYSREF_MISALIGN_COUNT__ */

#ifndef __TX_LANE_ENABLE__
#define __TX_LANE_ENABLE__
#define TX_LANE_ENABLE(x) (x)->tx_lane_enable_register.tx_lane_enable_u.tx_lane_enable
#define imola_tx_registers_TX_LANE_ENABLE(x) (x)->tx_lane_enable_register.tx_lane_enable_u.bits.tx_lane_enable
typedef volatile struct tx_lane_enable_s {
	union {
		struct {
			unsigned int tx_lane_enable : 8;
		} bits;
		uint32_t tx_lane_enable;
	} tx_lane_enable_u;
} tx_lane_enable_t;
#endif /* __TX_LANE_ENABLE__ */

#ifndef __TX_SCRAMBLE_CONFIG__
#define __TX_SCRAMBLE_CONFIG__
#define TX_SCRAMBLE_CONFIG(x) (x)->tx_scramble_config_register.tx_scramble_config_u.tx_scramble_config
#define imola_tx_registers_TX_SCRAMBLE(x) (x)->tx_scramble_config_register.tx_scramble_config_u.bits.tx_scramble
#define imola_tx_registers_TX_EARLY_SYNC(x) (x)->tx_scramble_config_register.tx_scramble_config_u.bits.tx_early_sync
#define imola_tx_registers_TX_ALLOW_CFG_SCR(x) (x)->tx_scramble_config_register.tx_scramble_config_u.bits.tx_allow_cfg_scr
typedef volatile struct tx_scramble_config_s {
	union {
		struct {
			unsigned int tx_scramble : 1;
			unsigned int tx_early_sync : 1;
			unsigned int tx_allow_cfg_scr : 1;
		} bits;
		uint32_t tx_scramble_config;
	} tx_scramble_config_u;
} tx_scramble_config_t;
#endif /* __TX_SCRAMBLE_CONFIG__ */

#ifndef __TX_DEBUG__
#define __TX_DEBUG__
#define TX_DEBUG(x) (x)->tx_debug_register.tx_debug_u.tx_debug
#define imola_tx_registers_RND_EN(x) (x)->tx_debug_register.tx_debug_u.bits.rnd_en
#define imola_tx_registers_SHORT_TEST_EN(x) (x)->tx_debug_register.tx_debug_u.bits.short_test_en
#define imola_tx_registers_DEBUG_MODE(x) (x)->tx_debug_register.tx_debug_u.bits.debug_mode
#define imola_tx_registers_INJECT_ADC_SAMPLE(x) (x)->tx_debug_register.tx_debug_u.bits.inject_adc_sample
#define imola_tx_registers_SEL_LINKLAYER_IN(x) (x)->tx_debug_register.tx_debug_u.bits.sel_linklayer_in
//F1000 REV B Specific - START
#define imola_tx_registers_MANUAL_TX_GOTO_DATA(x) (x)->tx_debug_register.tx_debug_u.bits.manual_tx_goto_data
#define imola_tx_registers_MANUAL_TX_EARLY_RELEASE_CNT(x) (x)->tx_debug_register.tx_debug_u.bits.manual_tx_early_release_cnt
//F1000 REV B Specific - END
typedef volatile struct tx_debug_s {
	union {
		struct {
			unsigned int rnd_en : 1;
			unsigned int short_test_en : 1;
			unsigned int debug_mode : 1;
			unsigned int inject_adc_sample : 1;
			unsigned int sel_linklayer_in : 3;
//F1000 REV B Specific - START
			unsigned int manual_tx_goto_data : 8;
			unsigned int manual_tx_early_release_cnt : 9;
//F1000 REV B Specific - END
		} bits;
		uint32_t tx_debug;
	} tx_debug_u;
} tx_debug_t;
#endif /* __TX_DEBUG__ */

#ifndef __TX_FCLK_STATUS__
#define __TX_FCLK_STATUS__
#define TX_FCLK_STATUS(x) (x)->tx_fclk_status_register.tx_fclk_status_u.tx_fclk_status
#define imola_tx_registers_FCLK_LMFC_ALIGNED(x) (x)->tx_fclk_status_register.tx_fclk_status_u.bits.fclk_lmfc_aligned
//F1000 REV B Specific - START
#define imola_tx_registers_TX_SYNC_N(x) (x)->tx_fclk_status_register.tx_fclk_status_u.bits.tx_sync_n
//F1000 REV B Specific - END
typedef volatile struct tx_fclk_status_s {
	union {
		struct {
			unsigned int fclk_lmfc_aligned : 1;
//F1000 REV B Specific - START
			unsigned int tx_sync_n : 3;
//F1000 REV B Specific - END
		} bits;
		uint32_t tx_fclk_status;
	} tx_fclk_status_u;
} tx_fclk_status_t;
#endif /* __TX_FCLK_STATUS__ */

#ifndef __TX_CGS_ILAS_CONFIG_1__
#define __TX_CGS_ILAS_CONFIG_1__
#define TX_CGS_ILAS_CONFIG_1(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.tx_cgs_ilas_config_1
#define imola_tx_registers_ILAS_MFRAMES(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.bits.ilas_mframes
#define imola_tx_registers_ILAS_DUMMY_DATA_OPTION(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.bits.ilas_dummy_data_option
#define imola_tx_registers_FCLKS_BETWEEN_ILAS_AND_SYNC_N(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.bits.fclks_between_ilas_and_sync_n
#define imola_tx_registers_DONT_ALIGN_ILAS_TO_LMFC(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.bits.dont_align_ilas_to_lmfc
#define imola_tx_registers_ENABLE_NMCDA_SL(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.bits.enable_nmcda_sl
#define imola_tx_registers_ILAS_EARLY_DATA_RELEASE(x) (x)->tx_cgs_ilas_config_1_register.tx_cgs_ilas_config_1_u.bits.ilas_early_data_release
typedef volatile struct tx_cgs_ilas_config_1_s {
	union {
		struct {
			unsigned int ilas_mframes : 8;
			unsigned int ilas_dummy_data_option : 3;
			unsigned int fclks_between_ilas_and_sync_n : 8;
			unsigned int dont_align_ilas_to_lmfc : 1;
			unsigned int enable_nmcda_sl : 1;
			unsigned int ilas_early_data_release : 8;
		} bits;
		uint32_t tx_cgs_ilas_config_1;
	} tx_cgs_ilas_config_1_u;
} tx_cgs_ilas_config_1_t;
#endif /* __TX_CGS_ILAS_CONFIG_1__ */

#ifndef __TX_CGS_ILAS_CONFIG_2__
#define __TX_CGS_ILAS_CONFIG_2__
#define TX_CGS_ILAS_CONFIG_2(x) (x)->tx_cgs_ilas_config_2_register.tx_cgs_ilas_config_2_u.tx_cgs_ilas_config_2
#define imola_tx_registers_ILAS_CONFIG_SCRAMBLE(x) (x)->tx_cgs_ilas_config_2_register.tx_cgs_ilas_config_2_u.bits.ilas_config_scramble
#define imola_tx_registers_ILAS_CONFIG_BITS_PER_SAMPLE(x) (x)->tx_cgs_ilas_config_2_register.tx_cgs_ilas_config_2_u.bits.ilas_config_bits_per_sample
#define imola_tx_registers_ILAS_CONFIG_SAMPLES_PER_CONVERTER_PER_FRAME(x) (x)->tx_cgs_ilas_config_2_register.tx_cgs_ilas_config_2_u.bits.ilas_config_samples_per_converter_per_frame
#define imola_tx_registers_ILAS_CONFIG_CONVERTER_RESOLUTION(x) (x)->tx_cgs_ilas_config_2_register.tx_cgs_ilas_config_2_u.bits.ilas_config_converter_resolution
typedef volatile struct tx_cgs_ilas_config_2_s {
	union {
		struct {
			unsigned int ilas_config_scramble : 1;
			unsigned int ilas_config_bits_per_sample : 5;
			unsigned int ilas_config_samples_per_converter_per_frame : 5;
			unsigned int ilas_config_converter_resolution : 5;
		} bits;
		uint32_t tx_cgs_ilas_config_2;
	} tx_cgs_ilas_config_2_u;
} tx_cgs_ilas_config_2_t;
#endif /* __TX_CGS_ILAS_CONFIG_2__ */

#ifndef __TX_CGS_ILAS_CONFIG_3__
#define __TX_CGS_ILAS_CONFIG_3__
#define TX_CGS_ILAS_CONFIG_3(x) (x)->tx_cgs_ilas_config_3_register.tx_cgs_ilas_config_3_u.tx_cgs_ilas_config_3
#define imola_tx_registers_ILAS_CONFIG_CONVERTERS_PER_DEVICE(x) (x)->tx_cgs_ilas_config_3_register.tx_cgs_ilas_config_3_u.bits.ilas_config_converters_per_device
#define imola_tx_registers_ILAS_CONFIG_LANE(x) (x)->tx_cgs_ilas_config_3_register.tx_cgs_ilas_config_3_u.bits.ilas_config_lane
#define imola_tx_registers_TX_CGS_ILAS_DISABLE(x) (x)->tx_cgs_ilas_config_3_register.tx_cgs_ilas_config_3_u.bits.tx_cgs_ilas_disable
typedef volatile struct tx_cgs_ilas_config_3_s {
	union {
		struct {
			unsigned int ilas_config_converters_per_device : 8;
			unsigned int ilas_config_lane : 4;
			unsigned int tx_cgs_ilas_disable : 1;
		} bits;
		uint32_t tx_cgs_ilas_config_3;
	} tx_cgs_ilas_config_3_u;
} tx_cgs_ilas_config_3_t;
#endif /* __TX_CGS_ILAS_CONFIG_3__ */

#ifndef __TX_CGS_ILAS_CONFIG_4__
#define __TX_CGS_ILAS_CONFIG_4__
#define TX_CGS_ILAS_CONFIG_4(x) (x)->tx_cgs_ilas_config_4_register.tx_cgs_ilas_config_4_u.tx_cgs_ilas_config_4
#define imola_tx_registers_ILAS_CONFIG_RESERVED_BYTE1(x) (x)->tx_cgs_ilas_config_4_register.tx_cgs_ilas_config_4_u.bits.ilas_config_reserved_byte1
#define imola_tx_registers_ILAS_CONFIG_RESERVED_BYTE2(x) (x)->tx_cgs_ilas_config_4_register.tx_cgs_ilas_config_4_u.bits.ilas_config_reserved_byte2
typedef volatile struct tx_cgs_ilas_config_4_s {
	union {
		struct {
			unsigned int ilas_config_reserved_byte1 : 8;
			unsigned int ilas_config_reserved_byte2 : 8;
		} bits;
		uint32_t tx_cgs_ilas_config_4;
	} tx_cgs_ilas_config_4_u;
} tx_cgs_ilas_config_4_t;
#endif /* __TX_CGS_ILAS_CONFIG_4__ */

#ifndef __TX_SYNC_CONFIG__
#define __TX_SYNC_CONFIG__
#define TX_SYNC_CONFIG(x) (x)->tx_sync_config_register.tx_sync_config_u.tx_sync_config
#define imola_tx_registers_MALFORMED_SYNC_IS_RESYNC(x) (x)->tx_sync_config_register.tx_sync_config_u.bits.malformed_sync_is_resync
#define imola_tx_registers_MISALIGNED_SYNC_IS_RESYNC(x) (x)->tx_sync_config_register.tx_sync_config_u.bits.misaligned_sync_is_resync
typedef volatile struct tx_sync_config_s {
	union {
		struct {
			unsigned int malformed_sync_is_resync : 1;
			unsigned int misaligned_sync_is_resync : 1;
		} bits;
		uint32_t tx_sync_config;
	} tx_sync_config_u;
} tx_sync_config_t;
#endif /* __TX_SYNC_CONFIG__ */

#ifndef __TX_SYNC_ERRORS_LINK0_1__
#define __TX_SYNC_ERRORS_LINK0_1__
#define TX_SYNC_ERRORS_LINK0_1(x) (x)->tx_sync_errors_link0_1_register.tx_sync_errors_link0_1_u.tx_sync_errors_link0_1
#define imola_tx_registers_ERR_PULSE_LESS_THAN_2FPER_CNT_0(x) (x)->tx_sync_errors_link0_1_register.tx_sync_errors_link0_1_u.bits.err_pulse_less_than_2fper_cnt_0
#define imola_tx_registers_ERR_PULSE_LESS_THAN_1FPER_CNT_0(x) (x)->tx_sync_errors_link0_1_register.tx_sync_errors_link0_1_u.bits.err_pulse_less_than_1fper_cnt_0
#define imola_tx_registers_ERR_PULSE_2FPER_CNT_0(x) (x)->tx_sync_errors_link0_1_register.tx_sync_errors_link0_1_u.bits.err_pulse_2fper_cnt_0
#define imola_tx_registers_ERR_PULSE_1FPER_CNT_0(x) (x)->tx_sync_errors_link0_1_register.tx_sync_errors_link0_1_u.bits.err_pulse_1fper_cnt_0
typedef volatile struct tx_sync_errors_link0_1_s {
	union {
		struct {
			unsigned int err_pulse_less_than_2fper_cnt_0 : 4;
			unsigned int err_pulse_less_than_1fper_cnt_0 : 4;
			unsigned int err_pulse_2fper_cnt_0 : 4;
			unsigned int err_pulse_1fper_cnt_0 : 4;
		} bits;
		uint32_t tx_sync_errors_link0_1;
	} tx_sync_errors_link0_1_u;
} tx_sync_errors_link0_1_t;
#endif /* __TX_SYNC_ERRORS_LINK0_1__ */

#ifndef __TX_SYNC_ERRORS_LINK0_2__
#define __TX_SYNC_ERRORS_LINK0_2__
#define TX_SYNC_ERRORS_LINK0_2(x) (x)->tx_sync_errors_link0_2_register.tx_sync_errors_link0_2_u.tx_sync_errors_link0_2
#define imola_tx_registers_ERR_PULSE_LESS_THAN_4FPER_CNT_0(x) (x)->tx_sync_errors_link0_2_register.tx_sync_errors_link0_2_u.bits.err_pulse_less_than_4fper_cnt_0
#define imola_tx_registers_MISALIGNED_SYNC_CNT_0(x) (x)->tx_sync_errors_link0_2_register.tx_sync_errors_link0_2_u.bits.misaligned_sync_cnt_0
typedef volatile struct tx_sync_errors_link0_2_s {
	union {
		struct {
			unsigned int err_pulse_less_than_4fper_cnt_0 : 4;
			unsigned int misaligned_sync_cnt_0 : 4;
		} bits;
		uint32_t tx_sync_errors_link0_2;
	} tx_sync_errors_link0_2_u;
} tx_sync_errors_link0_2_t;
#endif /* __TX_SYNC_ERRORS_LINK0_2__ */

#ifndef __TX_SYNC_ERRORS_LINK0_3__
#define __TX_SYNC_ERRORS_LINK0_3__
#define TX_SYNC_ERRORS_LINK0_3(x) (x)->tx_sync_errors_link0_3_register.tx_sync_errors_link0_3_u.tx_sync_errors_link0_3
#define imola_tx_registers_TOTAL_MISALIGNED_SYNCS_0(x) (x)->tx_sync_errors_link0_3_register.tx_sync_errors_link0_3_u.bits.total_misaligned_syncs_0
#define imola_tx_registers_TOTAL_MALFORMED_SYNCS_0(x) (x)->tx_sync_errors_link0_3_register.tx_sync_errors_link0_3_u.bits.total_malformed_syncs_0
typedef volatile struct tx_sync_errors_link0_3_s {
	union {
		struct {
			unsigned int total_misaligned_syncs_0 : 8;
			unsigned int total_malformed_syncs_0 : 8;
		} bits;
		uint32_t tx_sync_errors_link0_3;
	} tx_sync_errors_link0_3_u;
} tx_sync_errors_link0_3_t;
#endif /* __TX_SYNC_ERRORS_LINK0_3__ */

#ifndef __TX_ALIGN_DELAY__
#define __TX_ALIGN_DELAY__
#define TX_ALIGN_DELAY(x) (x)->tx_align_delay_register.tx_align_delay_u.tx_align_delay
#define imola_tx_registers_SYSREF_ALIGN_DELAY(x) (x)->tx_align_delay_register.tx_align_delay_u.bits.sysref_align_delay
typedef volatile struct tx_align_delay_s {
	union {
		struct {
			unsigned int sysref_align_delay : 8;
		} bits;
		uint32_t tx_align_delay;
	} tx_align_delay_u;
} tx_align_delay_t;
#endif /* __TX_ALIGN_DELAY__ */

#ifndef __LINKLAYER_IN_2_REG__
#define __LINKLAYER_IN_2_REG__
#define LINKLAYER_IN_2_REG(x) (x)->linklayer_in_2_reg_register.linklayer_in_2_reg_u.linklayer_in_2_reg
#define imola_tx_registers_LINKLAYER_IN_2_REG(x) (x)->linklayer_in_2_reg_register.linklayer_in_2_reg_u.bits.linklayer_in_2_reg
typedef volatile struct linklayer_in_2_reg_s {
	union {
		struct {
			unsigned int linklayer_in_2_reg : 8;
		} bits;
		uint32_t linklayer_in_2_reg;
	} linklayer_in_2_reg_u;
} linklayer_in_2_reg_t;
#endif /* __LINKLAYER_IN_2_REG__ */

#ifndef __TX_ATEST_CTRL__
#define __TX_ATEST_CTRL__
#define TX_ATEST_CTRL(x) (x)->tx_atest_ctrl_register.tx_atest_ctrl_u.tx_atest_ctrl
#define imola_tx_registers_TX_ATEST_CTRL(x) (x)->tx_atest_ctrl_register.tx_atest_ctrl_u.bits.tx_atest_ctrl
typedef volatile struct tx_atest_ctrl_s {
	union {
		struct {
			unsigned int tx_atest_ctrl : 8;
		} bits;
		uint32_t tx_atest_ctrl;
	} tx_atest_ctrl_u;
} tx_atest_ctrl_t;
#endif /* __TX_ATEST_CTRL__ */

//F1000 REV B Specific - START
#ifndef __INJECT_TX_BIT_ERROR__
#define __INJECT_TX_BIT_ERROR__
#define INJECT_TX_BIT_ERROR(x) (x)->inject_tx_bit_error_register.inject_tx_bit_error_u.inject_tx_bit_error
#define imola_tx_registers_INJ_TX_BIT_ERR(x) (x)->inject_tx_bit_error_register.inject_tx_bit_error_u.bits.inj_tx_bit_err
typedef volatile struct inject_tx_bit_error_s {
	union {
		struct {
			unsigned int inj_tx_bit_err : 1;
		} bits;
		uint32_t inject_tx_bit_error;
	} inject_tx_bit_error_u;
} inject_tx_bit_error_t;
#endif /* __INJECT_TX_BIT_ERROR__ */

#ifndef __LANE0_TX_BIT_ERROR_MASK_DELAY__
#define __LANE0_TX_BIT_ERROR_MASK_DELAY__
#define LANE0_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane0_tx_bit_error_mask_delay_register.lane0_tx_bit_error_mask_delay_u.lane0_tx_bit_error_mask_delay
#define imola_tx_registers_LANE0_ERROR_MASK(x) (x)->lane0_tx_bit_error_mask_delay_register.lane0_tx_bit_error_mask_delay_u.bits.lane0_error_mask
#define imola_tx_registers_LANE0_EN_BIT_DELAY(x) (x)->lane0_tx_bit_error_mask_delay_register.lane0_tx_bit_error_mask_delay_u.bits.lane0_en_bit_delay
typedef volatile struct lane0_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane0_error_mask : 10;
			unsigned int lane0_en_bit_delay : 10;
		} bits;
		uint32_t lane0_tx_bit_error_mask_delay;
	} lane0_tx_bit_error_mask_delay_u;
} lane0_tx_bit_error_mask_delay_t;
#endif /* __LANE0_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE1_TX_BIT_ERROR_MASK_DELAY__
#define __LANE1_TX_BIT_ERROR_MASK_DELAY__
#define LANE1_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane1_tx_bit_error_mask_delay_register.lane1_tx_bit_error_mask_delay_u.lane1_tx_bit_error_mask_delay
#define imola_tx_registers_LANE1_ERROR_MASK(x) (x)->lane1_tx_bit_error_mask_delay_register.lane1_tx_bit_error_mask_delay_u.bits.lane1_error_mask
#define imola_tx_registers_LANE1_EN_BIT_DELAY(x) (x)->lane1_tx_bit_error_mask_delay_register.lane1_tx_bit_error_mask_delay_u.bits.lane1_en_bit_delay
typedef volatile struct lane1_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane1_error_mask : 10;
			unsigned int lane1_en_bit_delay : 10;
		} bits;
		uint32_t lane1_tx_bit_error_mask_delay;
	} lane1_tx_bit_error_mask_delay_u;
} lane1_tx_bit_error_mask_delay_t;
#endif /* __LANE1_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE2_TX_BIT_ERROR_MASK_DELAY__
#define __LANE2_TX_BIT_ERROR_MASK_DELAY__
#define LANE2_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane2_tx_bit_error_mask_delay_register.lane2_tx_bit_error_mask_delay_u.lane2_tx_bit_error_mask_delay
#define imola_tx_registers_LANE2_ERROR_MASK(x) (x)->lane2_tx_bit_error_mask_delay_register.lane2_tx_bit_error_mask_delay_u.bits.lane2_error_mask
#define imola_tx_registers_LANE2_EN_BIT_DELAY(x) (x)->lane2_tx_bit_error_mask_delay_register.lane2_tx_bit_error_mask_delay_u.bits.lane2_en_bit_delay
typedef volatile struct lane2_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane2_error_mask : 10;
			unsigned int lane2_en_bit_delay : 10;
		} bits;
		uint32_t lane2_tx_bit_error_mask_delay;
	} lane2_tx_bit_error_mask_delay_u;
} lane2_tx_bit_error_mask_delay_t;
#endif /* __LANE2_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE3_TX_BIT_ERROR_MASK_DELAY__
#define __LANE3_TX_BIT_ERROR_MASK_DELAY__
#define LANE3_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane3_tx_bit_error_mask_delay_register.lane3_tx_bit_error_mask_delay_u.lane3_tx_bit_error_mask_delay
#define imola_tx_registers_LANE3_ERROR_MASK(x) (x)->lane3_tx_bit_error_mask_delay_register.lane3_tx_bit_error_mask_delay_u.bits.lane3_error_mask
#define imola_tx_registers_LANE3_EN_BIT_DELAY(x) (x)->lane3_tx_bit_error_mask_delay_register.lane3_tx_bit_error_mask_delay_u.bits.lane3_en_bit_delay
typedef volatile struct lane3_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane3_error_mask : 10;
			unsigned int lane3_en_bit_delay : 10;
		} bits;
		uint32_t lane3_tx_bit_error_mask_delay;
	} lane3_tx_bit_error_mask_delay_u;
} lane3_tx_bit_error_mask_delay_t;
#endif /* __LANE3_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE4_TX_BIT_ERROR_MASK_DELAY__
#define __LANE4_TX_BIT_ERROR_MASK_DELAY__
#define LANE4_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane4_tx_bit_error_mask_delay_register.lane4_tx_bit_error_mask_delay_u.lane4_tx_bit_error_mask_delay
#define imola_tx_registers_LANE4_ERROR_MASK(x) (x)->lane4_tx_bit_error_mask_delay_register.lane4_tx_bit_error_mask_delay_u.bits.lane4_error_mask
#define imola_tx_registers_LANE4_EN_BIT_DELAY(x) (x)->lane4_tx_bit_error_mask_delay_register.lane4_tx_bit_error_mask_delay_u.bits.lane4_en_bit_delay
typedef volatile struct lane4_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane4_error_mask : 10;
			unsigned int lane4_en_bit_delay : 10;
		} bits;
		uint32_t lane4_tx_bit_error_mask_delay;
	} lane4_tx_bit_error_mask_delay_u;
} lane4_tx_bit_error_mask_delay_t;
#endif /* __LANE4_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE5_TX_BIT_ERROR_MASK_DELAY__
#define __LANE5_TX_BIT_ERROR_MASK_DELAY__
#define LANE5_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane5_tx_bit_error_mask_delay_register.lane5_tx_bit_error_mask_delay_u.lane5_tx_bit_error_mask_delay
#define imola_tx_registers_LANE5_ERROR_MASK(x) (x)->lane5_tx_bit_error_mask_delay_register.lane5_tx_bit_error_mask_delay_u.bits.lane5_error_mask
#define imola_tx_registers_LANE5_EN_BIT_DELAY(x) (x)->lane5_tx_bit_error_mask_delay_register.lane5_tx_bit_error_mask_delay_u.bits.lane5_en_bit_delay
typedef volatile struct lane5_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane5_error_mask : 10;
			unsigned int lane5_en_bit_delay : 10;
		} bits;
		uint32_t lane5_tx_bit_error_mask_delay;
	} lane5_tx_bit_error_mask_delay_u;
} lane5_tx_bit_error_mask_delay_t;
#endif /* __LANE5_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE6_TX_BIT_ERROR_MASK_DELAY__
#define __LANE6_TX_BIT_ERROR_MASK_DELAY__
#define LANE6_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane6_tx_bit_error_mask_delay_register.lane6_tx_bit_error_mask_delay_u.lane6_tx_bit_error_mask_delay
#define imola_tx_registers_LANE6_ERROR_MASK(x) (x)->lane6_tx_bit_error_mask_delay_register.lane6_tx_bit_error_mask_delay_u.bits.lane6_error_mask
#define imola_tx_registers_LANE6_EN_BIT_DELAY(x) (x)->lane6_tx_bit_error_mask_delay_register.lane6_tx_bit_error_mask_delay_u.bits.lane6_en_bit_delay
typedef volatile struct lane6_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane6_error_mask : 10;
			unsigned int lane6_en_bit_delay : 10;
		} bits;
		uint32_t lane6_tx_bit_error_mask_delay;
	} lane6_tx_bit_error_mask_delay_u;
} lane6_tx_bit_error_mask_delay_t;
#endif /* __LANE6_TX_BIT_ERROR_MASK_DELAY__ */

#ifndef __LANE7_TX_BIT_ERROR_MASK_DELAY__
#define __LANE7_TX_BIT_ERROR_MASK_DELAY__
#define LANE7_TX_BIT_ERROR_MASK_DELAY(x) (x)->lane7_tx_bit_error_mask_delay_register.lane7_tx_bit_error_mask_delay_u.lane7_tx_bit_error_mask_delay
#define imola_tx_registers_LANE7_ERROR_MASK(x) (x)->lane7_tx_bit_error_mask_delay_register.lane7_tx_bit_error_mask_delay_u.bits.lane7_error_mask
#define imola_tx_registers_LANE7_EN_BIT_DELAY(x) (x)->lane7_tx_bit_error_mask_delay_register.lane7_tx_bit_error_mask_delay_u.bits.lane7_en_bit_delay
typedef volatile struct lane7_tx_bit_error_mask_delay_s {
	union {
		struct {
			unsigned int lane7_error_mask : 10;
			unsigned int lane7_en_bit_delay : 10;
		} bits;
		uint32_t lane7_tx_bit_error_mask_delay;
	} lane7_tx_bit_error_mask_delay_u;
} lane7_tx_bit_error_mask_delay_t;
#endif /* __LANE7_TX_BIT_ERROR_MASK_DELAY__ */
/* F1000 REV B specific. Added Manually */
#ifndef __LANE_IF_CTRL__
#define __LANE_IF_CTRL__
#define LANE_IF_CTRL(x) (x)->lane_if_ctrl_register.lane_if_ctrl_u.lane_if_ctrl
#define imola_tx_registers_LANE_IF_DELAY(x) (x)->lane_if_ctrl_register.lane_if_ctrl_u.bits.lane_if_delay
#define imola_tx_registers_LANE_CLK_ENABLES(x) (x)->lane_if_ctrl_register.lane_if_ctrl_u.bits.lane_clk_enables
typedef volatile struct lane_if_ctrl_s {
	union {
		struct {
			unsigned int lane_if_delay : 8;
			unsigned int lane_clk_enables : 8;
		} bits;
		uint32_t lane_if_ctrl;
	} lane_if_ctrl_u;
} lane_if_ctrl_t;
#endif /* __LANE_IF_CTRL__ */
//F1000 REV B Specific - END

typedef struct imola_tx_registers_s
{
	tx_link_config_t tx_link_config_register;	// Address: 0x0
	tx_link_enable_t tx_link_enable_register;	// Address: 0x1
	tx_sysref_misalign_count_t tx_sysref_misalign_count_register;	// Address: 0x2
	tx_lane_enable_t tx_lane_enable_register;	// Address: 0x3
	tx_scramble_config_t tx_scramble_config_register;	// Address: 0x4
	tx_debug_t tx_debug_register;	// Address: 0x5
	tx_fclk_status_t tx_fclk_status_register;	// Address: 0x6
	tx_cgs_ilas_config_1_t tx_cgs_ilas_config_1_register;	// Address: 0x7
	tx_cgs_ilas_config_2_t tx_cgs_ilas_config_2_register;	// Address: 0x8
	tx_cgs_ilas_config_3_t tx_cgs_ilas_config_3_register;	// Address: 0x9
	tx_cgs_ilas_config_4_t tx_cgs_ilas_config_4_register;	// Address: 0xa
	tx_sync_config_t tx_sync_config_register;	// Address: 0xb
	tx_sync_errors_link0_1_t tx_sync_errors_link0_1_register;	// Address: 0xc
	tx_sync_errors_link0_2_t tx_sync_errors_link0_2_register;	// Address: 0xd
	tx_sync_errors_link0_3_t tx_sync_errors_link0_3_register;	// Address: 0xe
	tx_align_delay_t tx_align_delay_register;	// Address: 0xf
	linklayer_in_2_reg_t linklayer_in_2_reg_register;	// Address: 0x10
	tx_atest_ctrl_t tx_atest_ctrl_register;	// Address: 0x11
//F1000 REV B Specific - START
	inject_tx_bit_error_t inject_tx_bit_error_register;	// Address: 0x12
	lane0_tx_bit_error_mask_delay_t lane0_tx_bit_error_mask_delay_register;	// Address: 0x13
	lane1_tx_bit_error_mask_delay_t lane1_tx_bit_error_mask_delay_register;	// Address: 0x14
	lane2_tx_bit_error_mask_delay_t lane2_tx_bit_error_mask_delay_register;	// Address: 0x15
	lane3_tx_bit_error_mask_delay_t lane3_tx_bit_error_mask_delay_register;	// Address: 0x16
	lane4_tx_bit_error_mask_delay_t lane4_tx_bit_error_mask_delay_register;	// Address: 0x17
	lane5_tx_bit_error_mask_delay_t lane5_tx_bit_error_mask_delay_register;	// Address: 0x18
	lane6_tx_bit_error_mask_delay_t lane6_tx_bit_error_mask_delay_register;	// Address: 0x19
	lane7_tx_bit_error_mask_delay_t lane7_tx_bit_error_mask_delay_register;	// Address: 0x1a
	lane_if_ctrl_t lane_if_ctrl_register;	// Address: 0x1b
//F1000 REV B Specific - END
} imola_tx_registers_t;

#endif /* __IMOLA_TX_REGISTERS__ */
