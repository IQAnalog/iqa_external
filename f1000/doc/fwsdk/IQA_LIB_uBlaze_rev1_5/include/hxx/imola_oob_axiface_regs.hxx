//*******************************************************************************
//      __  __                                                                  *
//     /  \/  \                                                                 *
//         \   \                                                                *
//    I Q - A N A L O G                                                         *
//           \   \            IQ-Analog Corp                                    *
//            \__/\__/       www.iqanalog.com                                   *
//                                                                              *
//------------------------------------------------------------------------------*
//                                                                              *
// Copyright (C) 2018-2019 IQ-Analog Corp. All rights reserved.                 *
//                                                                              *
//------------------------------------------------------------------------------*
// IQ-Analog CONFIDENTIAL                                                       *
//------------------------------------------------------------------------------*
//                                                                              *
// This file is released with "Government Purpose Rights" as defined            *
// in DFARS SUBPART 227.71, clause 252.227-7013.                                *
//                                                                              *
//*******************************************************************************

// Generated by RMM v3.1.4
// IQ-Analog Corp. 2013-2018.

#ifndef __IMOLA_OOB_AXIFACE_REGS__
#define __IMOLA_OOB_AXIFACE_REGS__

#ifndef __OOB_AXIFACE_CONTROL__
#define __OOB_AXIFACE_CONTROL__
#define OOB_AXIFACE_CONTROL(x) (x)->oob_axiface_control_register.oob_axiface_control_u.oob_axiface_control
#define imola_oob_axiface_regs_SW_RST_N(x) (x)->oob_axiface_control_register.oob_axiface_control_u.bits.sw_rst_n
#define imola_oob_axiface_regs_ENABLE_AXI_BUS_ACCESS(x) (x)->oob_axiface_control_register.oob_axiface_control_u.bits.enable_axi_bus_access
#define imola_oob_axiface_regs_EN_NUM_AXI_WR_REQ_CNT(x) (x)->oob_axiface_control_register.oob_axiface_control_u.bits.en_num_axi_wr_req_cnt
#define imola_oob_axiface_regs_EN_NUM_AXI_WR_CMPLT_CNT(x) (x)->oob_axiface_control_register.oob_axiface_control_u.bits.en_num_axi_wr_cmplt_cnt
#define imola_oob_axiface_regs_EN_NUM_AXI_RD_REQ_CNT(x) (x)->oob_axiface_control_register.oob_axiface_control_u.bits.en_num_axi_rd_req_cnt
#define imola_oob_axiface_regs_EN_NUM_AXI_RD_CMPLT_CNT(x) (x)->oob_axiface_control_register.oob_axiface_control_u.bits.en_num_axi_rd_cmplt_cnt
typedef volatile struct oob_axiface_control_s {
	union {
		struct {
			unsigned int sw_rst_n : 1;
			unsigned int enable_axi_bus_access : 1;
			unsigned int en_num_axi_wr_req_cnt : 1;
			unsigned int en_num_axi_wr_cmplt_cnt : 1;
			unsigned int en_num_axi_rd_req_cnt : 1;
			unsigned int en_num_axi_rd_cmplt_cnt : 1;
		} bits;
		uint32_t oob_axiface_control;
	} oob_axiface_control_u;
} oob_axiface_control_t;
#endif /* __OOB_AXIFACE_CONTROL__ */

#ifndef __OOB_AXIFACE_STATUS__
#define __OOB_AXIFACE_STATUS__
#define OOB_AXIFACE_STATUS(x) (x)->oob_axiface_status_register.oob_axiface_status_u.oob_axiface_status
#define imola_oob_axiface_regs_AXI_WRITE_ACTIVE(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.axi_write_active
#define imola_oob_axiface_regs_AXI_READ_ACTIVE(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.axi_read_active
#define imola_oob_axiface_regs_CURR_MAIN_FSM_STATE(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.curr_main_fsm_state
#define imola_oob_axiface_regs_CURR_WRFIFO_FSM_STATE(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.curr_wrfifo_fsm_state
#define imola_oob_axiface_regs_AXI_WRITE_READ_BOTH_ON(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.axi_write_read_both_on
#define imola_oob_axiface_regs_AXI_WRITE_WHEN_FIFO_FULL(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.axi_write_when_fifo_full
#define imola_oob_axiface_regs_WAITING_4_RD_DATA_VALID_ACK(x) (x)->oob_axiface_status_register.oob_axiface_status_u.bits.waiting_4_rd_data_valid_ack
typedef volatile struct oob_axiface_status_s {
	union {
		struct {
			unsigned int axi_write_active : 1;
			unsigned int axi_read_active : 1;
			unsigned int curr_main_fsm_state : 4;
			unsigned int curr_wrfifo_fsm_state : 4;
			unsigned int axi_write_read_both_on : 1;
			unsigned int axi_write_when_fifo_full : 1;
			unsigned int waiting_4_rd_data_valid_ack : 1;
		} bits;
		uint32_t oob_axiface_status;
	} oob_axiface_status_u;
} oob_axiface_status_t;
#endif /* __OOB_AXIFACE_STATUS__ */

#ifndef __AXI_BUS_STATUS__
#define __AXI_BUS_STATUS__
#define AXI_BUS_STATUS(x) (x)->axi_bus_status_register.axi_bus_status_u.axi_bus_status
#define imola_oob_axiface_regs_AW_VALID(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.aw_valid
#define imola_oob_axiface_regs_AW_READY(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.aw_ready
#define imola_oob_axiface_regs_W_VALID(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.w_valid
#define imola_oob_axiface_regs_W_READY(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.w_ready
#define imola_oob_axiface_regs_AR_VALID(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.ar_valid
#define imola_oob_axiface_regs_AR_READY(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.ar_ready
#define imola_oob_axiface_regs_R_VALID(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.r_valid
#define imola_oob_axiface_regs_R_READY(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.r_ready
#define imola_oob_axiface_regs_B_VALID(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.b_valid
#define imola_oob_axiface_regs_B_READY(x) (x)->axi_bus_status_register.axi_bus_status_u.bits.b_ready
typedef volatile struct axi_bus_status_s {
	union {
		struct {
			unsigned int aw_valid : 1;
			unsigned int aw_ready : 1;
			unsigned int w_valid : 1;
			unsigned int w_ready : 1;
			unsigned int ar_valid : 1;
			unsigned int ar_ready : 1;
			unsigned int r_valid : 1;
			unsigned int r_ready : 1;
			unsigned int b_valid : 1;
			unsigned int b_ready : 1;
		} bits;
		uint32_t axi_bus_status;
	} axi_bus_status_u;
} axi_bus_status_t;
#endif /* __AXI_BUS_STATUS__ */

#ifndef __NUM_AXI_WRITE_REQUESTS_AND_COMPLETION__
#define __NUM_AXI_WRITE_REQUESTS_AND_COMPLETION__
#define NUM_AXI_WRITE_REQUESTS_AND_COMPLETION(x) (x)->num_axi_write_requests_and_completion_register.num_axi_write_requests_and_completion_u.num_axi_write_requests_and_completion
#define imola_oob_axiface_regs_NUM_AXI_WR_REQ_CNT(x) (x)->num_axi_write_requests_and_completion_register.num_axi_write_requests_and_completion_u.bits.num_axi_wr_req_cnt
#define imola_oob_axiface_regs_NUM_AXI_WR_CMPLT_CNT(x) (x)->num_axi_write_requests_and_completion_register.num_axi_write_requests_and_completion_u.bits.num_axi_wr_cmplt_cnt
typedef volatile struct num_axi_write_requests_and_completion_s {
	union {
		struct {
			unsigned int num_axi_wr_req_cnt : 16;
			unsigned int num_axi_wr_cmplt_cnt : 16;
		} bits;
		uint32_t num_axi_write_requests_and_completion;
	} num_axi_write_requests_and_completion_u;
} num_axi_write_requests_and_completion_t;
#endif /* __NUM_AXI_WRITE_REQUESTS_AND_COMPLETION__ */

#ifndef __NUM_AXI_READ_REQUESTS_AND_COMPLETION__
#define __NUM_AXI_READ_REQUESTS_AND_COMPLETION__
#define NUM_AXI_READ_REQUESTS_AND_COMPLETION(x) (x)->num_axi_read_requests_and_completion_register.num_axi_read_requests_and_completion_u.num_axi_read_requests_and_completion
#define imola_oob_axiface_regs_NUM_AXI_RD_REQ_CNT(x) (x)->num_axi_read_requests_and_completion_register.num_axi_read_requests_and_completion_u.bits.num_axi_rd_req_cnt
#define imola_oob_axiface_regs_NUM_AXI_RD_CMPLT_CNT(x) (x)->num_axi_read_requests_and_completion_register.num_axi_read_requests_and_completion_u.bits.num_axi_rd_cmplt_cnt
typedef volatile struct num_axi_read_requests_and_completion_s {
	union {
		struct {
			unsigned int num_axi_rd_req_cnt : 16;
			unsigned int num_axi_rd_cmplt_cnt : 16;
		} bits;
		uint32_t num_axi_read_requests_and_completion;
	} num_axi_read_requests_and_completion_u;
} num_axi_read_requests_and_completion_t;
#endif /* __NUM_AXI_READ_REQUESTS_AND_COMPLETION__ */

#ifndef __WRITE_FIFO_SIGNALS__
#define __WRITE_FIFO_SIGNALS__
#define WRITE_FIFO_SIGNALS(x) (x)->write_fifo_signals_register.write_fifo_signals_u.write_fifo_signals
#define imola_oob_axiface_regs_AXI_WR_FIFO_FULL(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.axi_wr_fifo_full
#define imola_oob_axiface_regs_AXI_WR_FIFO_OVERFLOW(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.axi_wr_fifo_overflow
#define imola_oob_axiface_regs_AXI_WR_FIFO_EMPTY(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.axi_wr_fifo_empty
#define imola_oob_axiface_regs_AXI_WR_FIFO_UNDERFLOW(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.axi_wr_fifo_underflow
#define imola_oob_axiface_regs_WRITE_FIFO_COUNTER(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.write_fifo_counter
#define imola_oob_axiface_regs_PUSH_WRITE_FIFO(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.push_write_fifo
#define imola_oob_axiface_regs_POP_WRITE_FIFO(x) (x)->write_fifo_signals_register.write_fifo_signals_u.bits.pop_write_fifo
typedef volatile struct write_fifo_signals_s {
	union {
		struct {
			unsigned int axi_wr_fifo_full : 1;
			unsigned int axi_wr_fifo_overflow : 1;
			unsigned int axi_wr_fifo_empty : 1;
			unsigned int axi_wr_fifo_underflow : 1;
			unsigned int write_fifo_counter : 3;
			unsigned int push_write_fifo : 1;
			unsigned int pop_write_fifo : 1;
		} bits;
		uint32_t write_fifo_signals;
	} write_fifo_signals_u;
} write_fifo_signals_t;
#endif /* __WRITE_FIFO_SIGNALS__ */

typedef struct imola_oob_axiface_regs_s
{
	oob_axiface_control_t oob_axiface_control_register;	// Address: 0x0
	oob_axiface_status_t oob_axiface_status_register;	// Address: 0x1
	axi_bus_status_t axi_bus_status_register;	// Address: 0x2
	num_axi_write_requests_and_completion_t num_axi_write_requests_and_completion_register;	// Address: 0x3
	num_axi_read_requests_and_completion_t num_axi_read_requests_and_completion_register;	// Address: 0x4
	write_fifo_signals_t write_fifo_signals_register;	// Address: 0x5
} imola_oob_axiface_regs_t;

#endif /* __IMOLA_OOB_AXIFACE_REGS__ */
