//*******************************************************************************
//      __  __                                                                  *
//     /  \/  \                                                                 *
//         \   \                                                                *
//    I Q - A N A L O G                                                         *
//           \   \            IQ-Analog Corp                                    *
//            \__/\__/       www.iqanalog.com                                   *
//                                                                              *
//------------------------------------------------------------------------------*
//                                                                              *
// Copyright (C) 2018-2019 IQ-Analog Corp. All rights reserved.                 *
//                                                                              *
//------------------------------------------------------------------------------*
// IQ-Analog CONFIDENTIAL                                                       *
//------------------------------------------------------------------------------*
//                                                                              *
// This file is released with "Government Purpose Rights" as defined            *
// in DFARS SUBPART 227.71, clause 252.227-7013.                                *
//                                                                              *
//*******************************************************************************

// Generated by RMM v3.1.4
// IQ-Analog Corp. 2013-2018.

#ifndef __ETB_REGS__
#define __ETB_REGS__

#ifndef __ETB_CONTROL__
#define __ETB_CONTROL__
#define ETB_CONTROL(x) (x)->etb_control_register.etb_control_u.etb_control
#define etb_regs_SW_RST_N(x) (x)->etb_control_register.etb_control_u.bits.sw_rst_n
typedef volatile struct etb_control_s {
	union {
		struct {
			unsigned int sw_rst_n : 1;
		} bits;
		uint32_t etb_control;
	} etb_control_u;
} etb_control_t;
#endif /* __ETB_CONTROL__ */

#ifndef __ETB_STATUS__
#define __ETB_STATUS__
#define ETB_STATUS(x) (x)->etb_status_register.etb_status_u.etb_status
#define etb_regs_TRIGGER_ADDR(x) (x)->etb_status_register.etb_status_u.bits.trigger_addr
#define etb_regs_ETB_ADDR(x) (x)->etb_status_register.etb_status_u.bits.etb_addr
#define etb_regs_CAPTURE_COMPLETE(x) (x)->etb_status_register.etb_status_u.bits.capture_complete
#define etb_regs_MAIN_FSM_STATE(x) (x)->etb_status_register.etb_status_u.bits.main_fsm_state
#define etb_regs_ENABLED(x) (x)->etb_status_register.etb_status_u.bits.enabled
#define etb_regs_MODE(x) (x)->etb_status_register.etb_status_u.bits.mode
typedef volatile struct etb_status_s {
	union {
		struct {
			unsigned int trigger_addr : 10;
			unsigned int etb_addr : 10;
			unsigned int capture_complete : 1;
			unsigned int main_fsm_state : 2;
			unsigned int enabled : 1;
			unsigned int mode : 2;
		} bits;
		uint32_t etb_status;
	} etb_status_u;
} etb_status_t;
#endif /* __ETB_STATUS__ */

#ifndef __RD_TRACE_REG_2__
#define __RD_TRACE_REG_2__
#define RD_TRACE_REG_2(x) (x)->rd_trace_reg_2_register.rd_trace_reg_2_u.rd_trace_reg_2
#define etb_regs_RD_TRACE_REG_2(x) (x)->rd_trace_reg_2_register.rd_trace_reg_2_u.bits.rd_trace_reg_2
typedef volatile struct rd_trace_reg_2_s {
	union {
		struct {
			unsigned int rd_trace_reg_2 : 32;
		} bits;
		uint32_t rd_trace_reg_2;
	} rd_trace_reg_2_u;
} rd_trace_reg_2_t;
#endif /* __RD_TRACE_REG_2__ */

#ifndef __RD_TRACE_REG_1__
#define __RD_TRACE_REG_1__
#define RD_TRACE_REG_1(x) (x)->rd_trace_reg_1_register.rd_trace_reg_1_u.rd_trace_reg_1
#define etb_regs_RD_TRACE_REG_1(x) (x)->rd_trace_reg_1_register.rd_trace_reg_1_u.bits.rd_trace_reg_1
typedef volatile struct rd_trace_reg_1_s {
	union {
		struct {
			unsigned int rd_trace_reg_1 : 32;
		} bits;
		uint32_t rd_trace_reg_1;
	} rd_trace_reg_1_u;
} rd_trace_reg_1_t;
#endif /* __RD_TRACE_REG_1__ */

#ifndef __RD_TRACE_REG_0__
#define __RD_TRACE_REG_0__
#define RD_TRACE_REG_0(x) (x)->rd_trace_reg_0_register.rd_trace_reg_0_u.rd_trace_reg_0
#define etb_regs_RD_TRACE_REG_0(x) (x)->rd_trace_reg_0_register.rd_trace_reg_0_u.bits.rd_trace_reg_0
typedef volatile struct rd_trace_reg_0_s {
	union {
		struct {
			unsigned int rd_trace_reg_0 : 32;
		} bits;
		uint32_t rd_trace_reg_0;
	} rd_trace_reg_0_u;
} rd_trace_reg_0_t;
#endif /* __RD_TRACE_REG_0__ */

#ifndef __TRACE_SRAM0_CONTROL__
#define __TRACE_SRAM0_CONTROL__
#define TRACE_SRAM0_CONTROL(x) (x)->trace_sram0_control_register.trace_sram0_control_u.trace_sram0_control
#define etb_regs_TRACE_SRAM0_STOV(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_stov
#define etb_regs_TRACE_SRAM0_EMA(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_ema
#define etb_regs_TRACE_SRAM0_EMAW(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_emaw
#define etb_regs_TRACE_SRAM0_EMAS(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_emas
#define etb_regs_TRACE_SRAM0_RDT(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_rdt
#define etb_regs_TRACE_SRAM0_CRE1(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_cre1
#define etb_regs_TRACE_SRAM0_CRE2(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_cre2
#define etb_regs_TRACE_SRAM0_FCA1(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_fca1
#define etb_regs_TRACE_SRAM0_FCA2(x) (x)->trace_sram0_control_register.trace_sram0_control_u.bits.trace_sram0_fca2
typedef volatile struct trace_sram0_control_s {
	union {
		struct {
			unsigned int trace_sram0_stov : 1;
			unsigned int trace_sram0_ema : 3;
			unsigned int trace_sram0_emaw : 2;
			unsigned int trace_sram0_emas : 1;
			unsigned int trace_sram0_rdt : 1;
			unsigned int trace_sram0_cre1 : 1;
			unsigned int trace_sram0_cre2 : 1;
			unsigned int trace_sram0_fca1 : 6;
			unsigned int trace_sram0_fca2 : 6;
		} bits;
		uint32_t trace_sram0_control;
	} trace_sram0_control_u;
} trace_sram0_control_t;
#endif /* __TRACE_SRAM0_CONTROL__ */

#ifndef __TRACE_SRAM1_CONTROL__
#define __TRACE_SRAM1_CONTROL__
#define TRACE_SRAM1_CONTROL(x) (x)->trace_sram1_control_register.trace_sram1_control_u.trace_sram1_control
#define etb_regs_TRACE_SRAM1_STOV(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_stov
#define etb_regs_TRACE_SRAM1_EMA(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_ema
#define etb_regs_TRACE_SRAM1_EMAW(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_emaw
#define etb_regs_TRACE_SRAM1_EMAS(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_emas
#define etb_regs_TRACE_SRAM1_RDT(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_rdt
#define etb_regs_TRACE_SRAM1_CRE1(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_cre1
#define etb_regs_TRACE_SRAM1_CRE2(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_cre2
#define etb_regs_TRACE_SRAM1_FCA1(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_fca1
#define etb_regs_TRACE_SRAM1_FCA2(x) (x)->trace_sram1_control_register.trace_sram1_control_u.bits.trace_sram1_fca2
typedef volatile struct trace_sram1_control_s {
	union {
		struct {
			unsigned int trace_sram1_stov : 1;
			unsigned int trace_sram1_ema : 3;
			unsigned int trace_sram1_emaw : 2;
			unsigned int trace_sram1_emas : 1;
			unsigned int trace_sram1_rdt : 1;
			unsigned int trace_sram1_cre1 : 1;
			unsigned int trace_sram1_cre2 : 1;
			unsigned int trace_sram1_fca1 : 6;
			unsigned int trace_sram1_fca2 : 6;
		} bits;
		uint32_t trace_sram1_control;
	} trace_sram1_control_u;
} trace_sram1_control_t;
#endif /* __TRACE_SRAM1_CONTROL__ */

#ifndef __ETB_SELF_CLEARING__
#define __ETB_SELF_CLEARING__
#define ETB_SELF_CLEARING(x) (x)->etb_self_clearing_register.etb_self_clearing_u.etb_self_clearing
#define etb_regs_DEC_ETB_ADDR(x) (x)->etb_self_clearing_register.etb_self_clearing_u.bits.dec_etb_addr
#define etb_regs_INC_ETB_ADDR(x) (x)->etb_self_clearing_register.etb_self_clearing_u.bits.inc_etb_addr
#define etb_regs_ZERO_ETB_ADDR(x) (x)->etb_self_clearing_register.etb_self_clearing_u.bits.zero_etb_addr
#define etb_regs_ETB_INITIATE(x) (x)->etb_self_clearing_register.etb_self_clearing_u.bits.etb_initiate
#define etb_regs_FORCE_TRIGGER(x) (x)->etb_self_clearing_register.etb_self_clearing_u.bits.force_trigger
typedef volatile struct etb_self_clearing_s {
	union {
		struct {
			unsigned int dec_etb_addr : 1;
			unsigned int inc_etb_addr : 1;
			unsigned int zero_etb_addr : 1;
			unsigned int etb_initiate : 1;
			unsigned int force_trigger : 1;
		} bits;
		uint32_t etb_self_clearing;
	} etb_self_clearing_u;
} etb_self_clearing_t;
#endif /* __ETB_SELF_CLEARING__ */

typedef struct etb_regs_s
{
	etb_control_t etb_control_register;	// Address: 0x0
	etb_status_t etb_status_register;	// Address: 0x1
	rd_trace_reg_2_t rd_trace_reg_2_register;	// Address: 0x2
	rd_trace_reg_1_t rd_trace_reg_1_register;	// Address: 0x3
	rd_trace_reg_0_t rd_trace_reg_0_register;	// Address: 0x4
	trace_sram0_control_t trace_sram0_control_register;	// Address: 0x5
	trace_sram1_control_t trace_sram1_control_register;	// Address: 0x6
	etb_self_clearing_t etb_self_clearing_register;	// Address: 0x7
} etb_regs_t;

#endif /* __ETB_REGS__ */
