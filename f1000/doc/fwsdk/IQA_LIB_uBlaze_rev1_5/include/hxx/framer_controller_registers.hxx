//*******************************************************************************
//      __  __                                                                  *
//     /  \/  \                                                                 *
//         \   \                                                                *
//    I Q - A N A L O G                                                         *
//           \   \            IQ-Analog Corp                                    *
//            \__/\__/       www.iqanalog.com                                   *
//                                                                              *
//------------------------------------------------------------------------------*
//                                                                              *
// Copyright (C) 2018-2019 IQ-Analog Corp. All rights reserved.                 *
//                                                                              *
//------------------------------------------------------------------------------*
// IQ-Analog CONFIDENTIAL                                                       *
//------------------------------------------------------------------------------*
//                                                                              *
// This file is released with "Government Purpose Rights" as defined            *
// in DFARS SUBPART 227.71, clause 252.227-7013.                                *
//                                                                              *
//*******************************************************************************

// Generated by RMM v3.1.4
// IQ-Analog Corp. 2013-2018.

#ifndef __FRAMER_CONTROLLER_REGISTERS__
#define __FRAMER_CONTROLLER_REGISTERS__

#ifndef __FRAMER_CONTROLLER_CONTROL__
#define __FRAMER_CONTROLLER_CONTROL__
#define FRAMER_CONTROLLER_CONTROL(x) (x)->framer_controller_control_register.framer_controller_control_u.framer_controller_control
#define framer_controller_registers_FEW_NUM_ENTRIES_MINUS_1(x) (x)->framer_controller_control_register.framer_controller_control_u.bits.few_num_entries_minus_1
#define framer_controller_registers_SW_RST_N(x) (x)->framer_controller_control_register.framer_controller_control_u.bits.sw_rst_n
#define framer_controller_registers_SW_ENABLE(x) (x)->framer_controller_control_register.framer_controller_control_u.bits.sw_enable
#define framer_controller_registers_DISABLE_LMFC_SYNC(x) (x)->framer_controller_control_register.framer_controller_control_u.bits.disable_lmfc_sync
#define framer_controller_registers_WR_MICROCODE(x) (x)->framer_controller_control_register.framer_controller_control_u.bits.wr_microcode
#define framer_controller_registers_ENABLE_LMFC_COUNT(x) (x)->framer_controller_control_register.framer_controller_control_u.bits.enable_lmfc_count
typedef volatile struct framer_controller_control_s {
	union {
		struct {
			unsigned int few_num_entries_minus_1 : 10;
			unsigned int sw_rst_n : 1;
			unsigned int sw_enable : 1;
			unsigned int disable_lmfc_sync : 1;
			unsigned int wr_microcode : 1;
			unsigned int enable_lmfc_count : 1;
		} bits;
		uint32_t framer_controller_control;
	} framer_controller_control_u;
} framer_controller_control_t;
#endif /* __FRAMER_CONTROLLER_CONTROL__ */

#ifndef __FRAMER_CONTROLLER_STATUS__
#define __FRAMER_CONTROLLER_STATUS__
#define FRAMER_CONTROLLER_STATUS(x) (x)->framer_controller_status_register.framer_controller_status_u.framer_controller_status
#define framer_controller_registers_CONFIG_COMPLETE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.config_complete
#define framer_controller_registers_CONFIG_ACTIVE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.config_active
#define framer_controller_registers_INVALID_FEW_NUM_ENTRIES_ERR_BIT(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.invalid_few_num_entries_err_bit
#define framer_controller_registers_MAIN_FSM_STATE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.main_fsm_state
#define framer_controller_registers_CFG_FSM_STATE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.cfg_fsm_state
#define framer_controller_registers_FEW_COUNTER(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.few_counter
#define framer_controller_registers_NOP_ACTIVE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.nop_active
#define framer_controller_registers_WAIT_ACTIVE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.wait_active
#define framer_controller_registers_FST_WAIT_COMPLETE(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.fst_wait_complete
#define framer_controller_registers_FREEZE_PC(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.freeze_pc
#define framer_controller_registers_STACK_OVERFLOW_ERR_BIT(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.stack_overflow_err_bit
#define framer_controller_registers_STACK_UNDERFLOW_ERR_BIT(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.stack_underflow_err_bit
#define framer_controller_registers_PC_OUT_OF_BOUNDS(x) (x)->framer_controller_status_register.framer_controller_status_u.bits.pc_out_of_bounds
typedef volatile struct framer_controller_status_s {
	union {
		struct {
			unsigned int config_complete : 1;
			unsigned int config_active : 1;
			unsigned int invalid_few_num_entries_err_bit : 1;
			unsigned int main_fsm_state : 4;
			unsigned int cfg_fsm_state : 4;
			unsigned int few_counter : 10;
			unsigned int nop_active : 1;
			unsigned int wait_active : 1;
			unsigned int fst_wait_complete : 1;
			unsigned int freeze_pc : 1;
			unsigned int stack_overflow_err_bit : 1;
			unsigned int stack_underflow_err_bit : 1;
			unsigned int pc_out_of_bounds : 1;
		} bits;
		uint32_t framer_controller_status;
	} framer_controller_status_u;
} framer_controller_status_t;
#endif /* __FRAMER_CONTROLLER_STATUS__ */

#ifndef __TRIGGER_CONTROL__
#define __TRIGGER_CONTROL__
#define TRIGGER_CONTROL(x) (x)->trigger_control_register.trigger_control_u.trigger_control
#define framer_controller_registers_TRIGGER1_COUNT(x) (x)->trigger_control_register.trigger_control_u.bits.trigger1_count
#define framer_controller_registers_TRIGGER2_COUNT(x) (x)->trigger_control_register.trigger_control_u.bits.trigger2_count
#define framer_controller_registers_TRIGGER1_COUNT_MODE(x) (x)->trigger_control_register.trigger_control_u.bits.trigger1_count_mode
#define framer_controller_registers_TRIGGER2_COUNT_MODE(x) (x)->trigger_control_register.trigger_control_u.bits.trigger2_count_mode
#define framer_controller_registers_TRIGGER1_MODE(x) (x)->trigger_control_register.trigger_control_u.bits.trigger1_mode
#define framer_controller_registers_TRIGGER2_MODE(x) (x)->trigger_control_register.trigger_control_u.bits.trigger2_mode
#define framer_controller_registers_ENABLE_TRIGGER_CHAIN(x) (x)->trigger_control_register.trigger_control_u.bits.enable_trigger_chain
typedef volatile struct trigger_control_s {
	union {
		struct {
			unsigned int trigger1_count : 8;
			unsigned int trigger2_count : 8;
			unsigned int trigger1_count_mode : 2;
			unsigned int trigger2_count_mode : 2;
			unsigned int trigger1_mode : 3;
			unsigned int trigger2_mode : 3;
			unsigned int enable_trigger_chain : 1;
		} bits;
		uint32_t trigger_control;
	} trigger_control_u;
} trigger_control_t;
#endif /* __TRIGGER_CONTROL__ */

#ifndef __WR_MICROCODE_REG_2__
#define __WR_MICROCODE_REG_2__
#define WR_MICROCODE_REG_2(x) (x)->wr_microcode_reg_2_register.wr_microcode_reg_2_u.wr_microcode_reg_2
#define framer_controller_registers_WR_MICROCODE_REG_2(x) (x)->wr_microcode_reg_2_register.wr_microcode_reg_2_u.bits.wr_microcode_reg_2
typedef volatile struct wr_microcode_reg_2_s {
	union {
		struct {
			unsigned int wr_microcode_reg_2 : 32;
		} bits;
		uint32_t wr_microcode_reg_2;
	} wr_microcode_reg_2_u;
} wr_microcode_reg_2_t;
#endif /* __WR_MICROCODE_REG_2__ */

#ifndef __WR_MICROCODE_REG_1__
#define __WR_MICROCODE_REG_1__
#define WR_MICROCODE_REG_1(x) (x)->wr_microcode_reg_1_register.wr_microcode_reg_1_u.wr_microcode_reg_1
#define framer_controller_registers_WR_MICROCODE_REG_1(x) (x)->wr_microcode_reg_1_register.wr_microcode_reg_1_u.bits.wr_microcode_reg_1
typedef volatile struct wr_microcode_reg_1_s {
	union {
		struct {
			unsigned int wr_microcode_reg_1 : 32;
		} bits;
		uint32_t wr_microcode_reg_1;
	} wr_microcode_reg_1_u;
} wr_microcode_reg_1_t;
#endif /* __WR_MICROCODE_REG_1__ */

#ifndef __WR_MICROCODE_REG_0__
#define __WR_MICROCODE_REG_0__
#define WR_MICROCODE_REG_0(x) (x)->wr_microcode_reg_0_register.wr_microcode_reg_0_u.wr_microcode_reg_0
#define framer_controller_registers_WR_MICROCODE_REG_0(x) (x)->wr_microcode_reg_0_register.wr_microcode_reg_0_u.bits.wr_microcode_reg_0
typedef volatile struct wr_microcode_reg_0_s {
	union {
		struct {
			unsigned int wr_microcode_reg_0 : 32;
		} bits;
		uint32_t wr_microcode_reg_0;
	} wr_microcode_reg_0_u;
} wr_microcode_reg_0_t;
#endif /* __WR_MICROCODE_REG_0__ */

#ifndef __MICROCODE_SRAM_BYTE_WRITE_MASK__
#define __MICROCODE_SRAM_BYTE_WRITE_MASK__
#define MICROCODE_SRAM_BYTE_WRITE_MASK(x) (x)->microcode_sram_byte_write_mask_register.microcode_sram_byte_write_mask_u.microcode_sram_byte_write_mask
#define framer_controller_registers_MICROCODE_SRAM_BE_WRITE_MASK(x) (x)->microcode_sram_byte_write_mask_register.microcode_sram_byte_write_mask_u.bits.microcode_sram_be_write_mask
typedef volatile struct microcode_sram_byte_write_mask_s {
	union {
		struct {
			unsigned int microcode_sram_be_write_mask : 12;
		} bits;
		uint32_t microcode_sram_byte_write_mask;
	} microcode_sram_byte_write_mask_u;
} microcode_sram_byte_write_mask_t;
#endif /* __MICROCODE_SRAM_BYTE_WRITE_MASK__ */

#ifndef __MICROCODE_SRAM_CONTROL__
#define __MICROCODE_SRAM_CONTROL__
#define MICROCODE_SRAM_CONTROL(x) (x)->microcode_sram_control_register.microcode_sram_control_u.microcode_sram_control
#define framer_controller_registers_MICROCODE_SRAM_STOV(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_stov
#define framer_controller_registers_MICROCODE_SRAM_EMA(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_ema
#define framer_controller_registers_MICROCODE_SRAM_EMAW(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_emaw
#define framer_controller_registers_MICROCODE_SRAM_EMAS(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_emas
#define framer_controller_registers_MICROCODE_SRAM_RDT(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_rdt
#define framer_controller_registers_MICROCODE_SRAM_CRE1(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_cre1
#define framer_controller_registers_MICROCODE_SRAM_CRE2(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_cre2
#define framer_controller_registers_MICROCODE_SRAM_FCA1(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_fca1
#define framer_controller_registers_MICROCODE_SRAM_FCA2(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_fca2
#define framer_controller_registers_MICROCODE_SRAM_CEN_MASK(x) (x)->microcode_sram_control_register.microcode_sram_control_u.bits.microcode_sram_cen_mask
typedef volatile struct microcode_sram_control_s {
	union {
		struct {
			unsigned int microcode_sram_stov : 1;
			unsigned int microcode_sram_ema : 3;
			unsigned int microcode_sram_emaw : 2;
			unsigned int microcode_sram_emas : 1;
			unsigned int microcode_sram_rdt : 1;
			unsigned int microcode_sram_cre1 : 1;
			unsigned int microcode_sram_cre2 : 1;
			unsigned int microcode_sram_fca1 : 6;
			unsigned int microcode_sram_fca2 : 6;
			unsigned int microcode_sram_cen_mask : 1;
		} bits;
		uint32_t microcode_sram_control;
	} microcode_sram_control_u;
} microcode_sram_control_t;
#endif /* __MICROCODE_SRAM_CONTROL__ */

#ifndef __WAIT_NOP_REGISTERS__
#define __WAIT_NOP_REGISTERS__
#define WAIT_NOP_REGISTERS(x) (x)->wait_nop_registers_register.wait_nop_registers_u.wait_nop_registers
#define framer_controller_registers_MFRAME_PRIOD(x) (x)->wait_nop_registers_register.wait_nop_registers_u.bits.mframe_priod
#define framer_controller_registers_WAIT_COMPARE(x) (x)->wait_nop_registers_register.wait_nop_registers_u.bits.wait_compare
#define framer_controller_registers_NOP_DURATION(x) (x)->wait_nop_registers_register.wait_nop_registers_u.bits.nop_duration
typedef volatile struct wait_nop_registers_s {
	union {
		struct {
			unsigned int mframe_priod : 9;
			unsigned int wait_compare : 9;
			unsigned int nop_duration : 8;
		} bits;
		uint32_t wait_nop_registers;
	} wait_nop_registers_u;
} wait_nop_registers_t;
#endif /* __WAIT_NOP_REGISTERS__ */

#ifndef __DEBUG_CONTROL__
#define __DEBUG_CONTROL__
#define DEBUG_CONTROL(x) (x)->debug_control_register.debug_control_u.debug_control
#define framer_controller_registers_HW_BREAKPOINT1(x) (x)->debug_control_register.debug_control_u.bits.hw_breakpoint1
#define framer_controller_registers_HW_BREAKPOINT2(x) (x)->debug_control_register.debug_control_u.bits.hw_breakpoint2
#define framer_controller_registers_DEBUG_BUS_ADDR(x) (x)->debug_control_register.debug_control_u.bits.debug_bus_addr
#define framer_controller_registers_DEBUG_HALT(x) (x)->debug_control_register.debug_control_u.bits.debug_halt
#define framer_controller_registers_DEBUG_ENABLE(x) (x)->debug_control_register.debug_control_u.bits.debug_enable
#define framer_controller_registers_ETB_ENABLE(x) (x)->debug_control_register.debug_control_u.bits.etb_enable
#define framer_controller_registers_DISABLE_SW_BREAK(x) (x)->debug_control_register.debug_control_u.bits.disable_sw_break
typedef volatile struct debug_control_s {
	union {
		struct {
			unsigned int hw_breakpoint1 : 10;
			unsigned int hw_breakpoint2 : 10;
			unsigned int debug_bus_addr : 5;
			unsigned int debug_halt : 1;
			unsigned int debug_enable : 1;
			unsigned int etb_enable : 1;
			unsigned int disable_sw_break : 1;
		} bits;
		uint32_t debug_control;
	} debug_control_u;
} debug_control_t;
#endif /* __DEBUG_CONTROL__ */

#ifndef __DEBUG_DATA__
#define __DEBUG_DATA__
#define DEBUG_DATA(x) (x)->debug_data_register.debug_data_u.debug_data
#define framer_controller_registers_DEBUG_DATA(x) (x)->debug_data_register.debug_data_u.bits.debug_data
typedef volatile struct debug_data_s {
	union {
		struct {
			unsigned int debug_data : 32;
		} bits;
		uint32_t debug_data;
	} debug_data_u;
} debug_data_t;
#endif /* __DEBUG_DATA__ */

#ifndef __SELF_CLEARING__
#define __SELF_CLEARING__
#define SELF_CLEARING(x) (x)->self_clearing_register.self_clearing_u.self_clearing
#define framer_controller_registers_INITIATE_CONFIG(x) (x)->self_clearing_register.self_clearing_u.bits.initiate_config
#define framer_controller_registers_DEBUG_SINGLE_STEP(x) (x)->self_clearing_register.self_clearing_u.bits.debug_single_step
#define framer_controller_registers_DEBUG_RESUME(x) (x)->self_clearing_register.self_clearing_u.bits.debug_resume
#define framer_controller_registers_CL_INVALID_FEW_NUM_ENTRIES(x) (x)->self_clearing_register.self_clearing_u.bits.cl_invalid_few_num_entries
#define framer_controller_registers_CL_STACK_OVERFLOW(x) (x)->self_clearing_register.self_clearing_u.bits.cl_stack_overflow
#define framer_controller_registers_CL_STACK_UNDERFLOW(x) (x)->self_clearing_register.self_clearing_u.bits.cl_stack_underflow
typedef volatile struct self_clearing_s {
	union {
		struct {
			unsigned int initiate_config : 1;
			unsigned int debug_single_step : 1;
			unsigned int debug_resume : 1;
			unsigned int cl_invalid_few_num_entries : 1;
			unsigned int cl_stack_overflow : 1;
			unsigned int cl_stack_underflow : 1;
		} bits;
		uint32_t self_clearing;
	} self_clearing_u;
} self_clearing_t;
#endif /* __SELF_CLEARING__ */

typedef struct framer_controller_registers_s
{
	framer_controller_control_t framer_controller_control_register;	// Address: 0x0
	framer_controller_status_t framer_controller_status_register;	// Address: 0x1
	trigger_control_t trigger_control_register;	// Address: 0x2
	wr_microcode_reg_2_t wr_microcode_reg_2_register;	// Address: 0x3
	wr_microcode_reg_1_t wr_microcode_reg_1_register;	// Address: 0x4
	wr_microcode_reg_0_t wr_microcode_reg_0_register;	// Address: 0x5
	microcode_sram_byte_write_mask_t microcode_sram_byte_write_mask_register;	// Address: 0x6
	microcode_sram_control_t microcode_sram_control_register;	// Address: 0x7
	wait_nop_registers_t wait_nop_registers_register;	// Address: 0x8
	debug_control_t debug_control_register;	// Address: 0x9
	debug_data_t debug_data_register;	// Address: 0xa
	self_clearing_t self_clearing_register;	// Address: 0xb
} framer_controller_registers_t;

#endif /* __FRAMER_CONTROLLER_REGISTERS__ */
